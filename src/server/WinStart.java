/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import client.MapleCharacter;
import commons.services.LoggingService;
import configs.Config;
import configs.ServerConfig;

import handling.channel.ChannelServer;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import server.Timer.GuiTimer;
import server.shop.MapleShopFactory;
import tools.Pair;

/**
 * @author 宏伟
 */
public class WinStart extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 6858557462052039707L;
    public static WinStart instance = null;
    private final PrintStream printStream;
    private long starttime = 0;
    private ScheduledFuture<?> shutdownServer, startRunTime;
    private Map<String, Pair<String, String>> worldProperties = new HashMap<>();
    private Map<String, Boolean> eventsStatus = new HashMap<>();
    private final ReentrantReadWriteLock mutex = new ReentrantReadWriteLock();
    private ImageIcon icon = new ImageIcon(this.getClass().getClassLoader().getResource("tools/Image/Icon.png"));
    private final Lock writeLock = mutex.writeLock();
    private Vector<Vector<String>> playerTableRom = new Vector<>();
    private int buffline = 0;
//    private 

    /**
     * Creates new form WinStart
     */
    public WinStart() {
        initComponents();
        setIconImage(icon.getImage());
        printStream = new PrintStream(new newOutputStream());
        System.setOut(printStream);
        System.setErr(printStream);
        GuiTimer.getInstance().start();

        LoggingService.init();
        Config.load();

        Vector<String> columnName = new Vector<>();
        columnName.add("id");
        columnName.add("名称");
        columnName.add("职业");
        columnName.add("等级");
        columnName.add("所在地图");
        //columnName.add("频道");
        columnName.add("点券");

        columnName.add("金币");
        playerTable.setModel(new DefaultTableModel(playerTableRom, columnName));
//        initGlobalSetting();
//        ServicePropertyEditor editor = new ServicePropertyEditor();
//        PropertyEditorSupport
    }

    public static final WinStart getInstance() {
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "serial"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        popupMenu1 = new java.awt.PopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        PlayerCount = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        RunTime = new javax.swing.JLabel();
        RunStats = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        ActiveThread = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        AuthStatus = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLoginPort = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jChannelPortList = new javax.swing.JComboBox();
        jChannelPort = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jServerName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jCashShopPort = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jServerVersion = new javax.swing.JTextField();
        StartGameServer = new javax.swing.JButton();
        ShutdownGameServer = new javax.swing.JButton();
        在线玩家 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        playerTable = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        events = new javax.swing.JComboBox();
        eventSwitch = new javax.swing.JToggleButton();
        重载事件 = new javax.swing.JButton();
        重载商店 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleInfo = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList1);

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("冒险岛服务端控制平台 【YSMS工作室出品 QQ：782532075】");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        PlayerCount.setText("在线人数：0人");
        jToolBar1.add(PlayerCount);
        jToolBar1.add(filler3);
        jToolBar1.add(filler4);

        RunTime.setText("运行时长：0:00:00:00");
        RunTime.setMaximumSize(new java.awt.Dimension(150, 15));
        RunTime.setMinimumSize(new java.awt.Dimension(150, 15));
        RunTime.setName(""); // NOI18N
        RunTime.setPreferredSize(new java.awt.Dimension(200, 15));
        jToolBar1.add(RunTime);

        RunStats.setText("运行状态：已关闭");
        RunStats.setMaximumSize(new java.awt.Dimension(110, 15));
        RunStats.setMinimumSize(new java.awt.Dimension(110, 15));
        jToolBar1.add(RunStats);
        jToolBar1.add(filler5);

        ActiveThread.setText("活动线程：0");
        jToolBar1.add(ActiveThread);
        jToolBar1.add(filler6);

        AuthStatus.setBackground(new java.awt.Color(255, 255, 255));
        AuthStatus.setForeground(java.awt.Color.red);
        AuthStatus.setText("授权使用版本：v133   验证成功");
        jToolBar1.add(AuthStatus);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("游戏基本设置"));

        jLabel3.setText("登陆端口：");

        jLoginPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jLoginPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLoginPortKeyPressed(evt);
            }
        });

        jLabel5.setText("频道端口：");

        jChannelPortList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jChannelPortList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChannelPortListItemStateChanged(evt);
            }
        });

        jChannelPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jChannelPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jChannelPortKeyPressed(evt);
            }
        });

        jLabel7.setText("游戏名称：");

        jServerName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jServerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jServerNameKeyPressed(evt);
            }
        });

        jLabel6.setText("商城端口：");

        jCashShopPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jCashShopPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCashShopPortKeyPressed(evt);
            }
        });

        jLabel8.setText("游戏版本：");

        jServerVersion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jServerVersion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jServerVersionKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCashShopPort))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLoginPort))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jChannelPortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jChannelPort, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jServerName)
                            .addComponent(jServerVersion))))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jChannelPort, jChannelPortList});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jServerVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLoginPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jCashShopPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jChannelPortList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChannelPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        StartGameServer.setText("开启服务端");
        StartGameServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartGameServerActionPerformed(evt);
            }
        });

        ShutdownGameServer.setText("关闭服务端");
        ShutdownGameServer.setEnabled(false);
        ShutdownGameServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShutdownGameServerActionPerformed(evt);
            }
        });

        在线玩家.setBorder(javax.swing.BorderFactory.createTitledBorder("在线玩家管理"));

        playerTable.setAutoCreateRowSorter(true);
        playerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "名称", "职业", "等级", "所在地图", "点券", "金币"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        playerTable.setGridColor(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        playerTable.setInheritsPopupMenu(true);
        playerTable.getTableHeader().setResizingAllowed(false);
        playerTable.getTableHeader().setReorderingAllowed(false);
        playerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(playerTable);
        if (playerTable.getColumnModel().getColumnCount() > 0) {
            playerTable.getColumnModel().getColumn(0).setResizable(false);
            playerTable.getColumnModel().getColumn(1).setResizable(false);
            playerTable.getColumnModel().getColumn(2).setResizable(false);
            playerTable.getColumnModel().getColumn(3).setResizable(false);
            playerTable.getColumnModel().getColumn(4).setResizable(false);
            playerTable.getColumnModel().getColumn(5).setResizable(false);
            playerTable.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout 在线玩家Layout = new javax.swing.GroupLayout(在线玩家);
        在线玩家.setLayout(在线玩家Layout);
        在线玩家Layout.setHorizontalGroup(
            在线玩家Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
        );
        在线玩家Layout.setVerticalGroup(
            在线玩家Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("便捷功能"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("事件管理"));

        events.setEditable(true);
        events.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eventsItemStateChanged(evt);
            }
        });

        eventSwitch.setText("ON");
        eventSwitch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventSwitchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(events, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventSwitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(events, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(eventSwitch))
        );

        重载事件.setText("重载事件");
        重载事件.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                重载事件ActionPerformed(evt);
            }
        });

        重载商店.setText("重载商店");
        重载商店.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                重载商店ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(重载事件)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(重载商店))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(重载商店)
                    .addComponent(重载事件))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 30, Short.MAX_VALUE)
                        .addComponent(StartGameServer, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(ShutdownGameServer, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(64, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(在线玩家, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(在线玩家, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartGameServer, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(ShutdownGameServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        在线玩家.getAccessibleContext().setAccessibleName("在线玩家");

        jTabbedPane.addTab("控制台", jPanel1);

        consoleInfo.setEditable(false);
        consoleInfo.setBackground(new java.awt.Color(0, 0, 0));
        consoleInfo.setColumns(20);
        consoleInfo.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        consoleInfo.setForeground(new java.awt.Color(255, 255, 255));
        consoleInfo.setLineWrap(true);
        consoleInfo.setRows(1000);
        consoleInfo.setToolTipText("");
        consoleInfo.setDoubleBuffered(true);
        jScrollPane1.setViewportView(consoleInfo);

        jTabbedPane.addTab("服务端信息", jScrollPane1);

        jPanel8.setEnabled(false);

        jLabel1.setText("本服务端由YSMS完善出品，当前版本号为133.1.01");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 418, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("其他", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void setRunStats(boolean on) {
        StartGameServer.setEnabled(!on);
        ShutdownGameServer.setEnabled(on);
        RunStats.setText("运行状态：" + (on ? "正在运行" : "已关闭"));
    }

    private void startRunTime() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                startRunTime = Timer.GuiTimer.getInstance().register(new Runnable() {
                    @Override
                    public void run() {
                        RunTime.setText(formatDuring(System.currentTimeMillis() - starttime));
                    }
                }, 1000);
            }
        }).start();
    }

    public static final String formatDuring(long mss) {
        long days = mss / (1000 * 60 * 60 * 24);
        long hours = (mss % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);
        long minutes = (mss % (1000 * 60 * 60)) / (1000 * 60);
        long seconds = (mss % (1000 * 60)) / 1000;
        return "运行时长：" + days + ":" + (hours / 10 == 0 ? "0" : "") + hours + ":" + (minutes / 10 == 0 ? "0" : "") + minutes + ":"
                + (seconds / 10 == 0 ? "0" : "") + seconds;
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(this, "确定要退出？", "警告", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        loadSetting();
    }//GEN-LAST:event_formWindowOpened

    private void ShutdownGameServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShutdownGameServerActionPerformed
        // TODO add your handling code here:
        final String input = JOptionPane.showInputDialog(this, "关闭倒计时(分钟)：", 0);
        final int time = Integer.valueOf(input);

        jTabbedPane.setSelectedIndex(1);
        final ShutdownServer si = ShutdownServer.getInstance();
        si.setTime(time);
        new Thread(new Runnable() {
            @Override
            public void run() {
                shutdownServer = Timer.GuiTimer.getInstance().register(new Runnable() {
                    @Override
                    public void run() {
                        ShutdownServer.getInstance().shutdown();
                        if (si.getTime() > 0) {
                            System.out.println("距离服务端完全关闭还剩 " + si.getTime() + " 分钟，已通知玩家，请耐心等待...");
                        } else {
                            shutdownServer.cancel(false);
                            startRunTime.cancel(false);
                            setRunStats(false);
                        }
                        si.setTime(si.getTime() - 1);
                    }
                }, 60000);
            }
        }).start();
    }//GEN-LAST:event_ShutdownGameServerActionPerformed

    private void StartGameServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartGameServerActionPerformed
        // TODO add your handling code here:
        starttime = System.currentTimeMillis();
        setRunStats(true);
        jTabbedPane.setSelectedIndex(1);
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Start.main(null);
                } catch (InterruptedException ex) {
                    Logger.getLogger(WinStart.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();

        // 开始服务端启动计时
        startRunTime();
        // 开始统计线程
        updateThreadNum();
    }//GEN-LAST:event_StartGameServerActionPerformed

    private void eventSwitchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventSwitchMouseClicked
        // TODO add your handling code here:
        String selitem = (String) events.getSelectedItem();
        boolean on = eventSwitch.isSelected();
        eventsStatus.put(selitem, on);
        StringBuilder eventlist = new StringBuilder();
        for (Entry<String, Boolean> e : eventsStatus.entrySet()) {
            if (e.getValue()) {
                eventlist.append(e.getKey());
                eventlist.append(",");
            }
        }
        changeSetting("channel.events", eventlist.toString());
    }//GEN-LAST:event_eventSwitchMouseClicked

    private void eventsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_eventsItemStateChanged
        // TODO add your handling code here:
        String evtname = (String) evt.getItem();
        if (!eventsStatus.containsKey(evt.getItem())) {
            events.addItem(evtname);
            eventsStatus.put(evtname, false);
        }
        eventSwitch.setSelected(eventsStatus.get(evtname));
        eventSwitch.setText(eventsStatus.get(evtname) ? "开启" : "关闭");
    }//GEN-LAST:event_eventsItemStateChanged

    private void jServerVersionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jServerVersionKeyPressed
        // TODO add your handling code here:
//        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
//            changeSetting("world.host", jServerVersion.getText());
//        }
    }//GEN-LAST:event_jServerVersionKeyPressed

    private void jCashShopPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCashShopPortKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            changeSetting("cashshop.port", jCashShopPort.getText());
        }
    }//GEN-LAST:event_jCashShopPortKeyPressed

    private void jServerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jServerNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            changeSetting("login.serverName", jServerName.getText());
        }
    }//GEN-LAST:event_jServerNameKeyPressed

    private void jChannelPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jChannelPortKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            String selitem = (String) jChannelPortList.getSelectedItem();
            changeSetting("channel.port" + selitem, jChannelPort.getText());
            ServerProperties.setProperty("channel.port" + selitem, jChannelPort.getText());
        }
    }//GEN-LAST:event_jChannelPortKeyPressed

    private void jChannelPortListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChannelPortListItemStateChanged
        // TODO add your handling code here:
        String selitem = (String) jChannelPortList.getSelectedItem();
        jChannelPort.setText(ServerProperties.getProperty("channel.port" + selitem, "-1"));
    }//GEN-LAST:event_jChannelPortListItemStateChanged

    private void jLoginPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLoginPortKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            changeSetting("login.port", jLoginPort.getText());
        }
    }//GEN-LAST:event_jLoginPortKeyPressed

    private void playerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerTableMouseClicked
        // TODO add your handling code here:
        int index = ((JTable) evt.getSource()).getSelectedRow();
        Vector rom = playerTableRom.get(index);
//        MapleCharacter player = ChannelServer.getCharacterByName(String.valueOf(rom.get(1)));
//        if (player != null) {
//            jPlayerLevel.setText("等级：" + String.valueOf(player.getLevel()));
//            jPlayerJob.setText("职业：" + String.valueOf(MapleCarnivalChallenge.getJobNameById(player.getJob())));
//            jPlayerMap.setText("当前地图：" + player.getMap().getMapName());
//            jPlayerOnlineTime.setText("在线时长：" + String.valueOf(player.getTodayOnlineTime()));
//            jPlayerACash.setText("点券：" + String.valueOf(player.getCSPoints(1)));
//            jPlayerMaplePoints.setText("抵用券：" + String.valueOf(player.getCSPoints(2)));
//        }
    }//GEN-LAST:event_playerTableMouseClicked
    boolean clicked = false;
    private void 重载事件ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_重载事件ActionPerformed
        if (clicked) {
            return;
        }
        clicked = true;
        ServerProperties.loadProperties("world.properties");
        for (ChannelServer instance : ChannelServer.getAllInstances()) {
            instance.reloadEvents();
        }
        JOptionPane.showMessageDialog(null, "事件重载完成");
        clicked = false;
    }//GEN-LAST:event_重载事件ActionPerformed

    private void 重载商店ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_重载商店ActionPerformed
        if (clicked) {
            return;
        }
        clicked = true;
        MapleShopFactory.getInstance().clear();
        JOptionPane.showMessageDialog(null, "商店重载完成");
        clicked = false;
    }//GEN-LAST:event_重载商店ActionPerformed

    private void changeSetting(String key, String value) {
        BufferedReader br = null;
        BufferedWriter bw = null;
        String line;
        StringBuilder sb = new StringBuilder();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream("world.properties"), "gbk"));
            while ((line = br.readLine()) != null) {
                if (line.startsWith(key)) {
                    sb.append(key);
                    sb.append("=");
                    sb.append(value);
                    sb.append("\r\n");
                    continue;
                }
                sb.append(line);
                sb.append("\r\n");
            }
            bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("world.properties"), "gbk"));
            bw.write(sb.toString());
        } catch (IOException ex) {
            Logger.getLogger(WinStart.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
                if (bw != null) {
                    bw.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(WinStart.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(this, "保存完毕。");
    }

    private void loadSetting() {

        jServerName.setText(ServerProperties.getProperty("login.serverName"));
        jServerVersion.setText(String.valueOf(ServerConfig.MAPLE_VERSION));
        jLoginPort.setText(ServerProperties.getProperty("login.port"));
        jCashShopPort.setText(ServerProperties.getProperty("cashshop.port"));
        jChannelPort.setText(ServerProperties.getProperty("channel.port" + (jChannelPortList.getSelectedIndex() + 1)));

        AuthStatus.setText("授权使用版本：v" + ServerConfig.MAPLE_VERSION + "   验证成功");

        // 读取事件列表
        List<String> eventlist = new ArrayList<>();
        eventlist.addAll(Arrays.asList(ServerProperties.getProperty("channel.events").split(",")));
        File lroot = new File("scripts\\event");
        for (File lf : lroot.listFiles()) {
            if (lf.getName().endsWith("js")) {
                String event = lf.getName().substring(0, lf.getName().length() - 3);
                events.addItem(event);
                eventsStatus.put(event, eventlist.contains(event));
            }
        }

//        jTable.setCellEditor(null);
    }

    public void updateThreadNum() {
        writeLock.lock();
        try {
            Timer.WorldTimer.GuiTimer.getInstance().register(new Runnable() {
                @Override
                public final void run() {
                    ActiveThread.setText("活动线程：" + Thread.activeCount() + "");
                }
            }, 1 * 1000);
        } finally {
            writeLock.unlock();
        }
    }

    public void updatePlayerList(MapleCharacter player, boolean add) {
        writeLock.lock();
        try {
            if (add) {
                Vector<String> column = new Vector<>();
                column.add(String.valueOf(player.getId()));
                column.add(player.getName());
                column.add(String.valueOf(player.getJob()));
                column.add(String.valueOf(player.getLevel()));
                column.add(String.valueOf(player.getMap().getMapName()));
                //column.add(String.valueOf(player.getChannel()));
                column.add(String.valueOf(player.getACash()));
                column.add(String.valueOf(player.getMeso()));
                //column.add(String.valueOf(player.getPoints()));

                column.add(String.valueOf(player.getMeso()));
                playerTableRom.add(column);
            } else {
                Iterator<Vector<String>> it = playerTableRom.iterator();
                while (it.hasNext()) {
                    Vector<String> v = it.next();
                    if (Integer.valueOf(v.get(0)) == player.getId()) {
                        playerTableRom.removeElement(v);
                        break;
                    }
                }
            }
            playerTable.updateUI();
        } finally {
            writeLock.unlock();
        }
        PlayerCount.setText("在线人数：" + playerTableRom.size() + "人");
    }

    /**
     * @param args the command line arguments
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WinStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WinStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WinStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WinStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                instance = new WinStart();
                instance.setVisible(true);
            }
        });
    }

    public class newOutputStream extends OutputStream {

        @Override
        public void write(int arg) throws IOException {
            // 忽略
        }

        @Override
        public void write(byte data[]) throws IOException {
            consoleInfo.append(new String(data));
        }

        @Override
        public void write(byte data[], int off, int len) throws IOException {
            if (buffline >= 5000) {
                consoleInfo.setText("");
                buffline = 0;
            }
            consoleInfo.append(new String(data, off, len));
            consoleInfo.setCaretPosition(consoleInfo.getText().length());
            buffline++;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ActiveThread;
    private javax.swing.JLabel AuthStatus;
    private javax.swing.JLabel PlayerCount;
    private javax.swing.JLabel RunStats;
    private javax.swing.JLabel RunTime;
    private javax.swing.JButton ShutdownGameServer;
    private javax.swing.JButton StartGameServer;
    private javax.swing.JTextArea consoleInfo;
    private javax.swing.JToggleButton eventSwitch;
    private javax.swing.JComboBox events;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JTextField jCashShopPort;
    private javax.swing.JTextField jChannelPort;
    private javax.swing.JComboBox jChannelPortList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JTextField jLoginPort;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jServerName;
    private javax.swing.JTextField jServerVersion;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable playerTable;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JPanel 在线玩家;
    private javax.swing.JButton 重载事件;
    private javax.swing.JButton 重载商店;
    // End of variables declaration//GEN-END:variables

    //public static GUIPrintStream out = new GUIPrintStream(System.out, output_jTextPane, output_out_jTextPane, GUIPrintStream.OUT);
    //public static GUIPrintStream err = new GUIPrintStream(System.err, output_jTextPane, output_err_jTextPane, GUIPrintStream.ERR);
    //public static GUIPrintStream notice = new GUIPrintStream(System.out, output_jTextPane, output_notice_jTextPane, GUIPrintStream.NOTICE);
    //public static GUIPrintStream packet = new GUIPrintStream(System.out, output_jTextPane, output_packet_jTextPane, GUIPrintStream.PACKET);
}
